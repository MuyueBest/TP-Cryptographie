 - Démontrer la propriété (1) à l’aide de tables de vérité.

    A = 1 B = 1  
    XOR(XOR(1,1),1) = 1
    
    A = 0 B = 1
    XOR(XOR(0,1),1) = 0
    
    A = 1 B = 0
    XOR(XOR(1,0),0) = 1
    
    A = 0 B = 0
    XOR(XOR(0,0),0) = 0


 - Montrer sur un exemple (message et clef de chiffrement de votre choix), que si on chiffre le message avec la clef et qu’on chiffre le message chiffré avec la même clef, on retrouve le message de départ en clair.

    "Salut" en binaire donne :
    '0101001101100001011011000111010101110100'
    La clé "02" en binaire donne :
    '0011000000110010'
    
    '0101001101100001011011000111010101110100' XOR '0011000000110010' = '0110001101010011010111000100011101000100'
    
    0101001101100001011011000111010101110100 message
    XOR 
    0011000000110010001100000011001000110000 clé de chiffrement
    =
    0110001101010011010111000100011101000100 résultat
    XOR
    0011000000110010001100000011001000110000 clé de chiffrement maintenant de déchiffrement
    =
    0101001101100001011011000111010101110100 message 


a1 = 5, b1 = 3, a2 = 7, b2 = 5

 - Calculer M , e, d et n.
 - En déduire la clef publique et la clef secrète.
 - Donner le message chiffré par la clef publique représenté par le code ASCII de la lettre ’a’ (en minuscule).
 - Montrer que si on chiffre le message avec la clef secrète on retrouve bien le code ASCII de la lettre ’a’.

    Calcul : 
    M = a1*b1-1 = 14
    e = a2*M+a1 = 103
    d = b2*M+b1 = 73
    n = (e*d-1)//M = 537
    
    Clef publique = (e, n) = (103,537)
    clef secrète = (d, n) = (73,537)
    
    Chiffrer :
    m < n
    opération = e*m%n
    
    Déchiffrer : 
    m < n
    opération = d*m%n
    
    Chiffrer :
    m = 'a'
    ord('a') = 97
    e * m % n = 103 * 97 % 537 = 325
    
    Déchiffrer :
    d * m % n = 73 * 325 % 537 = 97


a1 = 13, b1 = 32, a2 = 69, b2 = 35

 - Donner les informations suivantes à partir des fonctions Python codées pour l’algorithme KidRSA :
    Donner les valeurs des clefs publique et secrète.
    Donner la liste des 3 nombres pour le chiffrement de la chaîne de caractères "NSI" avec la clef publique.
    Montrer que si on déchiffre avec la clef secrète le message NSI préalablement chiffré avec la clef publique, on retrouve bien la chaine "NSI".

    Cléf publique : (28648, 1004889)
    Cléf privée : (14557, 1004889)
    
    Chiffrement : 
    m = 'NSI'
    m0 = 'N'
    m1 = 'S'
    m2 = 'I'
    m0 = ord('N') = 78
    m1 = ord('S') = 83
    m2 = ord('I') = 73
    m0 = 28648*78%1004889 = 224766
    m1 = 28648*83%1004889 = 368006
    m2 = 28648*73%1004889 = 81526
    
    Déchiffrement : 
    m0 = 224766
    m0' = 14557*224766%1004889 = 78
    m1 = 368006
    m1' = 14557*368006%1004889 = 83
    m2 = 81526
    m2' = 14557*81526%1004889 = 73
    m = chr(78)+chr(83)+chr(73) = 'NSI'


 - Écrire le corps de la fonction bruteForceKidRSA(e,n) qui permet de calculer et de retourner le premier entier d inférieur à n qui vérifie la relation « e × d − 1 est divisible par n ».
 - En déduire la valeur de d et obtenir ainsi le déchiffrement du message chiffré donné plus haut.

    Le message chiffré avec la clef publique : (e, n) = (53447, 5185112)
    A l'aide de la fonction :
        bruteForceKidRSA(53447, 5185112) >>> 323639
    Donc la clef privée est : (d, n) = (323639, 5185112)

    Puis ainsi déchiffrer le message :
    dechiffre_message([3580949, 2084433, 3687843, 4436101, 4489548, 1710304, 4329207, 4542995, 3901631, 1710304, 4061972, 3687843, 1710304, 3527502, 4222313, 4436101, 4436101, 1710304, 3687843, 4168866, 1710304, 4168866, 4436101, 3901631, 1710304, 3367161], (323639, 5185112)) >>> "C'EST QUI LE BOSS EN NSI ?"
    Maintenant nous savons le contenu du message : "C'EST QUI LE BOSS EN NSI ?"


 - Essayer de retrouver la clef secrète à l’aide de la fonction bruteForceKidRSA(e,n). Quel est le problème rencontré ?

    En essayant de déchiffrer le message : [16623683311702968, 19625181687427115, 16392798821262649, 16392798821262649, 20548719649188391, 7388303694090208, 17547221273464244, 15931029840382011, 19163412706546477, 7388303694090208, 15238376369061054, 18239874744785201, 18008990254344882, 19163412706546477, 7388303694090208, 19394297196986796, 19625181687427115, 20548719649188391, 15007491878620735, 19625181687427115, 20317835158748072, 7388303694090208, 7619188184530527]
    Avec la clef publique : (e, n) = (230884490440319, 194326240259798261076)
    Avec notre fonction bruteForceKidRSA(e,n) : 
        bruteForceKidRSA(230884490440319, 194326240259798261076) >>>
    Ici la fonction ne renvoie rien, enfin elle prend trop de temps à trouver le résultat, les nombres sont trop gros.


 - Coder ces deux fonctions en Python. En déduire la clef privée secrète associée à la clef publique : (19432624025979826176, 230884490440319). En déduire le décodage du deuxième message chiffré avec cette clef publique.

    En essayant de déchiffrer le message : [16623683311702968, 19625181687427115, 16392798821262649, 16392798821262649, 20548719649188391, 7388303694090208, 17547221273464244, 15931029840382011, 19163412706546477, 7388303694090208, 15238376369061054, 18239874744785201, 18008990254344882, 19163412706546477, 7388303694090208, 19394297196986796, 19625181687427115, 20548719649188391, 15007491878620735, 19625181687427115, 20317835158748072, 7388303694090208, 7619188184530527]
    Avec la clef publique : (e, n) = (230884490440319, 194326240259798261076)
    Avec notre fonction bruteForceKidRSA(e,n) : 
        modinv(230884490440319, 194326240259798261076) >>> 158674832848565541575
    La fonction renvoie bien directement le d, donc la clef privée : (158674832848565541575, 194326240259798261076)

    Puis en déchiffrant le message grâce à la cle privée et la fonction : 
        dechiffre_message([16623683311702968, 19625181687427115, 16392798821262649, 16392798821262649, 20548719649188391, 7388303694090208, 17547221273464244, 15931029840382011, 19163412706546477, 7388303694090208, 15238376369061054, 18239874744785201, 18008990254344882, 19163412706546477, 7388303694090208, 19394297196986796, 19625181687427115, 20548719649188391, 15007491878620735, 19625181687427115, 20317835158748072, 7388303694090208, 7619188184530527], (158674832848565541575, 194326240259798261076)) >>> 'HUGGY LES BONS TUYAUX !'
    On trouve ici que le message est donc : 'HUGGY LES BONS TUYAUX !'


 - Donner la taille des clefs couramment utilisées par RSA pour sécuriser des données sur Internet. Donner aussi quelle nouvelle technologie pourrait permettre de casser RSA en quelques secondes.

    La taille des clés RSA est de 2048 bits. Certains ordinateurs quantique arriveraient à casser une clé RSA de 2048 en 8 heures.
